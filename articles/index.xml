<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on 🐻 liyBlog</title>
    <link>answerboom.github.io/articles/</link>
    <description>Recent content in Posts on 🐻 liyBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 27 Jul 2023 21:11:50 +0800</lastBuildDate><atom:link href="answerboom.github.io/articles/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>扩散模型</title>
      <link>answerboom.github.io/articles/2023/07/27/diffusion-models-note/</link>
      <pubDate>Thu, 27 Jul 2023 21:11:50 +0800</pubDate>
      
      <guid>answerboom.github.io/articles/2023/07/27/diffusion-models-note/</guid>
      <description>扩散模型学习笔记 思路 训练个数为T（时刻数）的神经网络模型。通过正向扩散获得每个时刻t的均值和方差。利用重参数化技巧，将随机性转移到$\epsilon$上，整个过程看作是马尔可夫过程，每个时刻的分布如下图所示。根据下列公式可以得到任意时刻的$q(x_t|x_{t-1})$
学习$p_\theta$去近似q()，根据贝叶斯可以算出逆向过程q的均值和方差：
上述公式的均值为$b\over -2a$，方差为$1\over a$,计算p的对数损失，使其最大，
经过简化后的对数损失，且因为方差是常数，可优化的只有均值： 最后。学习一个$\epsilon_\theta$去逼近$\epsilon_t$
重参数化技巧 在高斯分布$\aleph(\mu,sigma^2)$中采样是一个随机过程，不能进行反向传播梯度，可以先从标准分布$\aleph(0，1)$中采样，得到$\sigma*\epsilon+\mu$将随机性转移到这个$\epsilon$常量上
1.导入数据 %matplotlib inline import matplotlib.pyplot as plt import numpy as np from sklearn.datasets import make_s_curve import torch s_curve,_ = make_s_curve(10**4,noise=0.1) s_curve = s_curve[:,[0,2]]/10.0 print(&amp;#34;shape of s:&amp;#34;,np.shape(s_curve)) #样本维度转化为特征维度 data = s_curve.T fig,ax = plt.subplots() ax.scatter(*data,color=&amp;#39;blue&amp;#39;,edgecolor=&amp;#39;white&amp;#39;); ax.axis(&amp;#39;off&amp;#39;) dataset = torch.Tensor(s_curve).float() 2. 确定超参数的值 num_steps = 100 #制定每一步的beta betas = torch.linspace(-6,6,num_steps) betas = torch.sigmoid(betas)*(0.5e-2 - 1e-5)+1e-5 #计算alpha、alpha_prod、alpha_prod_previous、alpha_bar_sqrt等变量的值 alphas = 1-betas alphas_prod = torch.cumprod(alphas,0) alphas_prod_p = torch.</description>
    </item>
    
    <item>
      <title>Github Error</title>
      <link>answerboom.github.io/articles/2023/06/08/github-error/</link>
      <pubDate>Thu, 08 Jun 2023 20:12:22 +0800</pubDate>
      
      <guid>answerboom.github.io/articles/2023/06/08/github-error/</guid>
      <description>$ git commit -m &amp;ldquo;first commit&amp;quot;错误 丢失或跳过git add .或git commit可能导致此错误：
$ git commit -m &amp;#34;first commit&amp;#34; On branch main Initial commit Untracked files: (use &amp;#34;git add &amp;lt;file&amp;gt;...&amp;#34; to include in what will be committed) .gitignore README.md _config.butterfly.yml _config.yml gulpfile.js package.json repoPic/ scaffolds/ source/ themes/ nothing added to commit but untracked files present (use &amp;#34;git add&amp;#34; to track) $ git push -u origin main错误 error: src refspec main does not match any error: failed to push some refs to &amp;#39;https://github.</description>
    </item>
    
    <item>
      <title>Hexo学习记录</title>
      <link>answerboom.github.io/articles/2023/06/08/hexonote/</link>
      <pubDate>Thu, 08 Jun 2023 19:03:00 +0800</pubDate>
      
      <guid>answerboom.github.io/articles/2023/06/08/hexonote/</guid>
      <description>vscode启动和部署 需要先设置vscode权限 get-ExectionPolicy set-ExecutionPolicy RemoteSigned 本地启动hexo hexo s 部署到github npm install hexo-deployer-git --save hexo clean &amp;amp;&amp;amp; hexo generate &amp;amp;&amp;amp; hexo deploy // Git BASH终端 hexo clean; hexo generate; hexo deploy // VSCODE终端 修改 _config.yml 文件 在blog-demo目录下的_config.yml，就是整个Hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的配置描述。 修改最后一行的配置，将repository修改为你自己的github项目地址即可，还有分支要改为main代表主分支（注意缩进）。
deploy: type: git repository: git@github.com:answer/answer.github.io.git branch: main hexo clean：删除之前生成的文件，若未生成过静态文件，可忽略此命令。 hexo generate：生成静态文章，可以用hexo g缩写 hexo deploy：部署文章，可以用hexo d缩写 vscode推送项目到GitHub仓库 https://www.fomal.cc/posts/e593433d.html</description>
    </item>
    
    <item>
      <title>风格迁移</title>
      <link>answerboom.github.io/articles/2023/05/30/styletransfer/</link>
      <pubDate>Tue, 30 May 2023 15:00:21 +0800</pubDate>
      
      <guid>answerboom.github.io/articles/2023/05/30/styletransfer/</guid>
      <description>学习风格迁移算法，第一次连接服务器运行深度学习代码，如何使用conda、jupter
服务器上跑深度学习代码 一、 连接服务器 （1）用户名密码 （2）linux操作 pwd：查看当前所在路径 watch nvidia-smi：查看显卡情况 top：查看cpu使用情况 df -h：查看磁盘空间 wget URL：下载文件 （3）conda操作 conda env list：列出所有环境 activate env-name：激活环境 conda list：查看当前环境中安装的包 conda env create -f environment.yaml --prefix /media/s304/Data/condaenv/Inst：根据文件创建环境并指定路径 二、 pycharm远程连接服务器 设置Connection 建立mapping 设置excluded paths 设置代码自动上传（Options） 设置python Interpreter 其他功能 打开服务器的terminal(可开多个)：Tools-Start SSH session 查看服务器文件：Tools-Development-Browse Remote Host 如果有参数，可以在edit configurations中设置parameters 三、遇到的问题 1. 跑代码的过程中cpu使用率较高，而gpu使用率为0 ​	解决方法：tensorflow-gpu版本问题、以及版本冲突问题，重新下包后解决。
风格迁移 fast-transfer python style.py --style data/style/style1.jpg \ --checkpoint-dir data/checkpoints \ --test data/content/girlandforest.jpg \ --test-dir data/result \ --content-weight 1.</description>
    </item>
    
    <item>
      <title>Blog笔记</title>
      <link>answerboom.github.io/articles/2022/12/27/blognote/</link>
      <pubDate>Tue, 27 Dec 2022 17:16:20 +0800</pubDate>
      
      <guid>answerboom.github.io/articles/2022/12/27/blognote/</guid>
      <description>blog项目笔记 mybatis plus 1. 类注解 @Data @NoArgsConstructor @AllArgsConstructor @TableName(&amp;#34;sg_article&amp;#34;) @Accessors(chain = true) public class Article{ } @Data：注在类上，提供类的get、set、equals、hashCode、toString方法
@NoArgsConstructor：提供类的无参构造
@AllArgsConstructor：提供类的全参构造
@TableName(&amp;quot;sg_article&amp;quot;)：将表与数据库里的表对应起来
@Accessors(chain = true)：将get、set方法的返回类型设置为实体类对象，代替了默认的返回void
实体类中加入数据库中不存在的列名需要加入TableField注解标识
@TableField(exist = false) private String categoryName; 2. mybatis plus中wapper方法 queryWapper.eq（字段名，val）
字段名可以用字符串也可以用方法：Article::getStatus
推荐用方法防止列名写错
lambdaQueryWrapper.eq(Objects.nonNull(categoryId) &amp;amp;&amp;amp; categoryId &amp;gt; 0, Article::getCategoryId, categoryId);
eq方法中有三个参数，第一个boolean为true时引入加入后两个参数条件，为false时不加入
3. 使用page分页需要配置分页插件，在config包下加入以下类 @Configuration public class MbatisPlusConfig { /** * 3.4.0之后版本 * @return */ @Bean public MybatisPlusInterceptor mybatisPlusInterceptor(){ MybatisPlusInterceptor mybatisPlusInterceptor = new MybatisPlusInterceptor(); mybatisPlusInterceptor.addInnerInterceptor(new PaginationInnerInterceptor()); return mybatisPlusInterceptor; } } 4、公共字段填充 插入时间、更新时间的自动填充</description>
    </item>
    
    <item>
      <title>ElementUi图片上传</title>
      <link>answerboom.github.io/articles/2022/10/21/elementuiimageupload/</link>
      <pubDate>Fri, 21 Oct 2022 16:50:19 +0800</pubDate>
      
      <guid>answerboom.github.io/articles/2022/10/21/elementuiimageupload/</guid>
      <description>ruoyi实现不需要token访问静态资源 在config/SecurityConfig配置
.antMatchers( HttpMethod.GET, &amp;#34;/&amp;#34;, &amp;#34;/*.html&amp;#34;, &amp;#34;/**/*.html&amp;#34;, &amp;#34;/**/*.css&amp;#34;, &amp;#34;/**/*.js&amp;#34;, //profile下有很多文件，只开放头像类的文件 &amp;#34;/profile/upload/**&amp;#34;, &amp;#34;/profile/**&amp;#34;, &amp;#34;/profile/avatar/**&amp;#34; &amp;ldquo;/xxx/**&amp;ldquo;让xxx路径下的全部文件访问不需要token
在config/ResourcesConfig中增加
/** 本地文件上传路径 */ registry.addResourceHandler(Constants.RESOURCE_PREFIX + &amp;#34;/**&amp;#34;) .addResourceLocations(&amp;#34;file:&amp;#34; + RuoYiConfig.getProfile() + &amp;#34;/&amp;#34;); 前端加入Element Ui upload组件组件 &amp;lt;template&amp;gt; &amp;lt;div ref=&amp;#34;dasd&amp;#34;&amp;gt; &amp;lt;el-upload class=&amp;#34;img-upload&amp;#34; ref=&amp;#34;upload&amp;#34; action=&amp;#34;http://localhost:8080/dss/ServiceStd/uploadimg&amp;#34; :on-preview=&amp;#34;handlePreview&amp;#34; :on-remove=&amp;#34;handleRemove&amp;#34; :headers=&amp;#34;header&amp;#34; :before-remove=&amp;#34;beforeRemove&amp;#34; :on-success=&amp;#34;handleSuccess&amp;#34; multiple :limit=&amp;#34;1&amp;#34; :on-exceed=&amp;#34;handleExceed&amp;#34; :file-list=&amp;#34;fileList&amp;#34;&amp;gt; &amp;lt;el-button size=&amp;#34;small&amp;#34; type=&amp;#34;primary&amp;#34;&amp;gt;点击上传&amp;lt;/el-button&amp;gt; &amp;lt;div slot=&amp;#34;tip&amp;#34; class=&amp;#34;el-upload__tip&amp;#34;&amp;gt;只能上传jpg/png文件，且不超过500kb&amp;lt;/div&amp;gt; &amp;lt;/el-upload&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; import { getToken } from &amp;#39;@/utils/auth&amp;#39;; export default { name: &amp;#39;ImgUpload&amp;#39;, data () { return { fileList: [], url: &amp;#39;&amp;#39;, header: { Authorization: &amp;#39;Bearer &amp;#39; + getToken() } } }, methods: { handleRemove (file, fileList) { this.</description>
    </item>
    
    <item>
      <title>Leetcode 重复元素</title>
      <link>answerboom.github.io/articles/2021/10/01/leetcoderepeatingelement/</link>
      <pubDate>Fri, 01 Oct 2021 11:37:16 +0800</pubDate>
      
      <guid>answerboom.github.io/articles/2021/10/01/leetcoderepeatingelement/</guid>
      <description>leetcode存在重复元素： 昨天写了leetcode存在重复元素问题，一开始暴力求解用两个for循环，时间复杂度太高了，想了想用快速排序，看了题解，题解直接调用c语言的qsort函数，于是手写了一个简单的快速排序算法，一开始栈上溢，发现是快速排序传入参数，数组的长度numsize直接作为数组的最后一个元素
bool containsDuplicate(int* nums, int numsSize){ quicksort(nums,0,numsSize); 后来在quicksort内修改
int temp; int i=low,j=high-1; if(low&amp;lt;high){ 发现输出结果，基准值右边的两个数不会调换次序
如：输入{0，3，4，1，6，5} 得到输出{0，3，1，4，5，6} 最后发现原来是j=high-1，每次递归会使high-1， 当最后一个子数组只剩2个元素时，high-1=low，使得最后的数组元素不会比较大小直接返回上次递归
修改后提交代码如下
void quicksort(int nums[],int low,int high){ int temp; int i=low,j=high; if(low&amp;lt;high){ temp=nums[i]; while(i&amp;lt;j){ while(j&amp;gt;i&amp;amp;&amp;amp;nums[j]&amp;gt;=temp)j--; if(j&amp;gt;i){ nums[i]=nums[j]; i++; } while(i&amp;lt;j&amp;amp;&amp;amp;nums[i]&amp;lt;=temp)i++; if(i&amp;lt;j){ nums[j]=nums[i]; j--; } } nums[i]=temp; quicksort(nums,low,i-1); quicksort(nums,i+1,high); } } bool containsDuplicate(int* nums, int numsSize){ int i; quicksort(nums,0,numsSize-1); for(i=0;i&amp;lt;numsSize-1;i++){ if(nums[i]==nums[i+1]){ return true; } } return false; } 提交时间复杂度还是太高，就像能不能在快速排序的时候就进行判断，如果排序时候遇到相同的数直接返回ture，这里一开始写返回false但是最后递归的时候深层的递归返回不会结束整个递归，只是结束当前递归返回上次递归，而最后的结果会被最上层的递归覆盖掉，于是加了if判断，若下层递归为ture及存在重复元素，直接返回ture， 代码如下
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.</description>
    </item>
    
  </channel>
</rss>
