<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>前端 on 🐻 liyBlog</title>
    <link>answerboom.github.io/tags/%E5%89%8D%E7%AB%AF/</link>
    <description>Recent content in 前端 on 🐻 liyBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 08 Jun 2023 19:03:00 +0800</lastBuildDate><atom:link href="answerboom.github.io/tags/%E5%89%8D%E7%AB%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hexo学习记录</title>
      <link>answerboom.github.io/articles/2023/06/08/hexonote/</link>
      <pubDate>Thu, 08 Jun 2023 19:03:00 +0800</pubDate>
      
      <guid>answerboom.github.io/articles/2023/06/08/hexonote/</guid>
      <description>vscode启动和部署 需要先设置vscode权限 get-ExectionPolicy set-ExecutionPolicy RemoteSigned 本地启动hexo hexo s 部署到github npm install hexo-deployer-git --save hexo clean &amp;amp;&amp;amp; hexo generate &amp;amp;&amp;amp; hexo deploy // Git BASH终端 hexo clean; hexo generate; hexo deploy // VSCODE终端 修改 _config.yml 文件 在blog-demo目录下的_config.yml，就是整个Hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的配置描述。 修改最后一行的配置，将repository修改为你自己的github项目地址即可，还有分支要改为main代表主分支（注意缩进）。
deploy: type: git repository: git@github.com:answer/answer.github.io.git branch: main hexo clean：删除之前生成的文件，若未生成过静态文件，可忽略此命令。 hexo generate：生成静态文章，可以用hexo g缩写 hexo deploy：部署文章，可以用hexo d缩写 vscode推送项目到GitHub仓库 https://www.fomal.cc/posts/e593433d.html</description>
    </item>
    
    <item>
      <title>ElementUi图片上传</title>
      <link>answerboom.github.io/articles/2022/10/21/elementuiimageupload/</link>
      <pubDate>Fri, 21 Oct 2022 16:50:19 +0800</pubDate>
      
      <guid>answerboom.github.io/articles/2022/10/21/elementuiimageupload/</guid>
      <description>ruoyi实现不需要token访问静态资源 在config/SecurityConfig配置
.antMatchers( HttpMethod.GET, &amp;#34;/&amp;#34;, &amp;#34;/*.html&amp;#34;, &amp;#34;/**/*.html&amp;#34;, &amp;#34;/**/*.css&amp;#34;, &amp;#34;/**/*.js&amp;#34;, //profile下有很多文件，只开放头像类的文件 &amp;#34;/profile/upload/**&amp;#34;, &amp;#34;/profile/**&amp;#34;, &amp;#34;/profile/avatar/**&amp;#34; &amp;ldquo;/xxx/**&amp;ldquo;让xxx路径下的全部文件访问不需要token
在config/ResourcesConfig中增加
/** 本地文件上传路径 */ registry.addResourceHandler(Constants.RESOURCE_PREFIX + &amp;#34;/**&amp;#34;) .addResourceLocations(&amp;#34;file:&amp;#34; + RuoYiConfig.getProfile() + &amp;#34;/&amp;#34;); 前端加入Element Ui upload组件组件 &amp;lt;template&amp;gt; &amp;lt;div ref=&amp;#34;dasd&amp;#34;&amp;gt; &amp;lt;el-upload class=&amp;#34;img-upload&amp;#34; ref=&amp;#34;upload&amp;#34; action=&amp;#34;http://localhost:8080/dss/ServiceStd/uploadimg&amp;#34; :on-preview=&amp;#34;handlePreview&amp;#34; :on-remove=&amp;#34;handleRemove&amp;#34; :headers=&amp;#34;header&amp;#34; :before-remove=&amp;#34;beforeRemove&amp;#34; :on-success=&amp;#34;handleSuccess&amp;#34; multiple :limit=&amp;#34;1&amp;#34; :on-exceed=&amp;#34;handleExceed&amp;#34; :file-list=&amp;#34;fileList&amp;#34;&amp;gt; &amp;lt;el-button size=&amp;#34;small&amp;#34; type=&amp;#34;primary&amp;#34;&amp;gt;点击上传&amp;lt;/el-button&amp;gt; &amp;lt;div slot=&amp;#34;tip&amp;#34; class=&amp;#34;el-upload__tip&amp;#34;&amp;gt;只能上传jpg/png文件，且不超过500kb&amp;lt;/div&amp;gt; &amp;lt;/el-upload&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; import { getToken } from &amp;#39;@/utils/auth&amp;#39;; export default { name: &amp;#39;ImgUpload&amp;#39;, data () { return { fileList: [], url: &amp;#39;&amp;#39;, header: { Authorization: &amp;#39;Bearer &amp;#39; + getToken() } } }, methods: { handleRemove (file, fileList) { this.</description>
    </item>
    
  </channel>
</rss>
